#
问题：
递归过程中，如数字等变量，在调用栈的每一层，其值的变化都会新分配一个储存位置来储存当前值，不会影响上一层的值，所以每一层的该值调用不会混淆。
但有些变量（列表等）它的元素值改变，其数据储存位置不会改变，即ID值不会改变，所以该层调用结束，返回到上一层栈时，该值并不能回到本来该层的状态，因为其
储存值一直在被覆盖。
解决方法（列表）：
用切片的方法复制一个新列表，储存位置就发生了改变
list = list[:].append()
而不是直接list.append()
